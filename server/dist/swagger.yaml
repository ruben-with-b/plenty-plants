basePath: /api/v1
consumes:
    - application/json
definitions:
    User:
        description: 'Represents a user.'
        properties:
            username:
                type: string
            hashedPw:
                type: string
        required:
            - username
            - hashedPw
        type: object
    TutorialProgress:
        description: 'The progress in a plant tutorial.'
        properties:
            progress:
                type: number
                format: double
                description: 'The actual step-number.'
        required:
            - progress
        type: object
    Condition:
        description: 'Describes the overall weather condition.'
        enum:
            - CLEAR
            - CLOUDY
            - RAINY
        type: string
    Weather:
        description: 'Represents the predicted weather status.'
        properties:
            condition:
                $ref: '#/definitions/Condition'
                description: 'The overall condition.'
            temperature:
                type: number
                format: double
                description: 'The temperature in celsius.'
            precipitation:
                type: number
                format: double
                description: 'The precipitation in millimeters per square meter.'
        required:
            - condition
            - temperature
            - precipitation
        type: object
    TimePeriod:
        description: "Represents a period of time (on a monthly basis).\r\n1 == january\r\n2 == february\r\n3 == march\r\n...\r\n12 == december"
        properties:
            firstMonth:
                type: number
                format: double
                description: 'The first month of the period.'
            lastMonth:
                type: number
                format: double
                description: 'The last month of the period.'
        required:
            - firstMonth
            - lastMonth
        type: object
    Species:
        description: 'A plants species.'
        enum:
            - Fruit
            - Vegetables
            - Herbs
        type: string
    Difficulty:
        description: 'The difficulty to grow a plant.'
        enum:
            - Simple
            - Moderate
            - Serious
        type: string
    PlantSummary:
        description: "Some basic information about a plant. Currently this information is\r\nshown in the \"Katalog\""
        properties:
            name:
                type: string
                description: 'The name of the plant.'
            species:
                $ref: '#/definitions/Species'
                description: 'The species of the plant.'
            sowingDistance:
                type: number
                format: double
                description: 'The sowing distance between the individual plants. (unit: cm)'
            sowingDepth:
                type: number
                format: double
                description: 'The sowing depth preferred by the plant. (unit: cm)'
            soilCondition:
                type: string
                description: 'The preferred soil condition.'
            germinationTime:
                type: number
                format: double
                description: 'The germination time of the plant. (unit: days)'
            numberOfHarvests:
                type: string
                description: 'The number of harvests. (unit: string)'
            difficulty:
                $ref: '#/definitions/Difficulty'
                description: 'The difficulty to grow this plant.'
            sowPeriodBegin:
                type: number
                format: double
                description: 'The begin of the sow period. (unit: month)'
            harvestPeriodEnd:
                type: number
                format: double
                description: 'The end of the harvest period. (unit: month)'
            location:
                type: string
                description: 'The plants preferred location.'
        required:
            - name
            - species
            - sowingDistance
            - sowingDepth
            - soilCondition
            - germinationTime
            - numberOfHarvests
            - difficulty
            - sowPeriodBegin
            - harvestPeriodEnd
            - location
        type: object
    TutorialStep:
        description: 'Represents a tutorial step.'
        properties:
            heading:
                type: string
                description: 'The heading of the step.'
            body:
                type: string
                description: 'The description of the step.'
        required:
            - heading
            - body
        type: object
    PushSubscription:
        description: "Configuration for a Push Subscription. This can be obtained on the frontend by calling\r\nserviceWorkerRegistration.pushManager.subscribe().\r\nThe expected format is the same output as JSON.stringify'ing a PushSubscription in the browser."
        properties:
            endpoint:
                type: string
            keys:
                type: object
        required:
            - endpoint
            - keys
        type: object
info:
    title: web-technologien
    version: 1.0.0
    license:
        name: ISC
paths:
    /user:
        get:
            operationId: GetUser
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/User'
            summary: 'Get the user profile for the current user.'
            tags:
                - User
            security:
                -
                    basicAuth: []
            parameters: []
    /user/my-plants:
        get:
            operationId: GetMyPlants
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            type: string
            summary: 'Get the users favourite plants.'
            tags:
                - User
            security:
                -
                    basicAuth: []
            parameters: []
    '/user/my-plants/{plant}':
        post:
            operationId: AddPlant
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                '204':
                    description: 'Plant successfully added.'
                '404':
                    description: 'No plant with given name available'
            summary: 'Add a plant to the users favourite plants.'
            tags:
                - User
            security:
                -
                    basicAuth: []
            parameters:
                -
                    description: 'The plant to be added.'
                    in: path
                    name: plant
                    required: true
                    type: string
        delete:
            operationId: RemovePlant
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                '204':
                    description: 'Plant successfully removed.'
            summary: 'Remove a plant from the users favourite plants.'
            tags:
                - User
            security:
                -
                    basicAuth: []
            parameters:
                -
                    description: 'The plant to be removed.'
                    in: path
                    name: plant
                    required: true
                    type: string
    '/user/my-plants/{plant}/tutorial-progress':
        get:
            operationId: GetTutorialProgress
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TutorialProgress'
                '404':
                    description: 'No plant with given name'
            summary: 'Get the tutorial-progress for a plant.'
            tags:
                - User
            security:
                -
                    basicAuth: []
            parameters:
                -
                    description: 'The name of the plant.'
                    in: path
                    name: plant
                    required: true
                    type: string
        put:
            operationId: UpdateTutorialProgress
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                '204':
                    description: 'Progress successfully updated.'
                '404':
                    description: 'No favourite plant with given name available'
            summary: 'Update the tutorial-progress of a plant.'
            tags:
                - User
            security:
                -
                    basicAuth: []
            parameters:
                -
                    description: 'The name of the plant.'
                    in: path
                    name: plant
                    required: true
                    type: string
                -
                    description: 'The new tutorial progress.'
                    in: body
                    name: tutorialProgress
                    required: true
                    schema:
                        $ref: '#/definitions/TutorialProgress'
    /auth/login:
        post:
            operationId: Login
            produces:
                - application/json
            responses:
                '204':
                    description: 'Logged in'
                    schema:
                        type: object
                '401':
                    description: 'Authentication error'
            description: 'Log in a user.'
            tags:
                - Authentication
            security:
                -
                    basicAuth: []
            parameters: []
    /auth/is-authenticated:
        get:
            operationId: IsAuthenticated
            produces:
                - application/json
            responses:
                '200':
                    description: Success
                    schema:
                        type: boolean
            description: 'Checks whether the current user is authenticated'
            tags:
                - Authentication
            security: []
            parameters: []
    /auth/logout:
        get:
            operationId: Logout
            produces:
                - application/json
            responses:
                '204':
                    description: 'Logged out'
            description: 'Log out a user.'
            tags:
                - Authentication
            security: []
            parameters: []
    /auth/signup:
        get:
            operationId: SignUp
            produces:
                - application/json
            responses:
                '204':
                    description: 'Signed up'
                    schema:
                        type: object
                '409':
                    description: 'User already exists'
            description: 'Sign up a new user.'
            tags:
                - Authentication
            security: []
            parameters:
                -
                    description: 'The username of the new user.'
                    in: query
                    name: username
                    required: true
                    type: string
                -
                    description: 'The password of the new user.'
                    in: query
                    name: password
                    required: true
                    type: string
    /weather:
        get:
            operationId: GetWeather
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/Weather'
                '404':
                    description: 'Invalid coordinates'
            summary: 'Get the actual weather for the specified location.'
            tags:
                - Weather
            security: []
            parameters:
                -
                    description: 'The coordinates (latitude) of the location for which the weather should be determined.'
                    in: query
                    name: latitude
                    required: true
                    type: string
                -
                    description: 'The coordinates (longitude) of the location for which the weather should be determined.'
                    in: query
                    name: longitude
                    required: true
                    type: string
    /plant/all:
        get:
            operationId: GetAvailablePlants
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            type: string
            summary: 'Obtaining all available plants.'
            tags:
                - Plants
            security: []
            parameters: []
    '/plant/{plant}/sowPeriod':
        get:
            operationId: GetSowPeriod
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TimePeriod'
                '404':
                    description: 'The specified plant does not exist'
            summary: 'Obtaining the sowing period for a plant'
            tags:
                - Plants
            security: []
            parameters:
                -
                    description: 'The plant for which the sow period should be determined.'
                    in: path
                    name: plant
                    required: true
                    type: string
    '/plant/{plant}/plantPeriod':
        get:
            operationId: GetPlantPeriod
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TimePeriod'
                '404':
                    description: 'The specified plant does not exist'
            summary: 'Obtaining the planting period for a plant'
            tags:
                - Plants
            security: []
            parameters:
                -
                    description: 'The plant for which the plant period should be determined.'
                    in: path
                    name: plant
                    required: true
                    type: string
    '/plant/{plant}/harvestPeriod':
        get:
            operationId: GetHarvestPeriod
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TimePeriod'
                '404':
                    description: 'The specified plant does not exist'
            summary: 'Obtaining the harvest period for a plant'
            tags:
                - Plants
            security: []
            parameters:
                -
                    description: 'The plant for which the harvest period should be determined.'
                    in: path
                    name: plant
                    required: true
                    type: string
    '/plant/{plant}/summary':
        get:
            operationId: GetSummary
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/PlantSummary'
                '404':
                    description: 'The specified plant does not exist'
            summary: 'Obtaining the summary for a plant.'
            tags:
                - Plants
            security: []
            parameters:
                -
                    description: 'The plant for which the summary should be fetched.'
                    in: path
                    name: plant
                    required: true
                    type: string
    '/plant/{plant}/tutorial-steps':
        get:
            operationId: GetTutorialSteps
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/TutorialStep'
            summary: 'Obtaining the tutorial steps for a plant.'
            tags:
                - Plants
            security: []
            parameters:
                -
                    description: 'The plant for which the steps should be fetched.'
                    in: path
                    name: plant
                    required: true
                    type: string
    /notification/add:
        post:
            operationId: AddSubscription
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                '201':
                    description: ""
                '401':
                    description: Unauthorized
                '500':
                    description: 'Internal server error'
            summary: 'Add a notification-subscription.'
            tags:
                - Notifications
            security:
                -
                    basicAuth: []
            parameters:
                -
                    description: 'The push subscription.'
                    in: body
                    name: pushSubscription
                    required: true
                    schema:
                        $ref: '#/definitions/PushSubscription'
    /notification/send-frost-warning:
        post:
            operationId: SendFrostWarning
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                '204':
                    description: ""
                '401':
                    description: Unauthorized
                '500':
                    description: 'Internal server error'
            summary: 'Send a frost-warning to the current user.'
            tags:
                - Notifications
            security:
                -
                    basicAuth: []
            parameters: []
produces:
    - application/json
swagger: '2.0'
securityDefinitions:
    basicAuth:
        type: basic
host: 'localhost:3000'
tags:
    -
        name: Authentication
        description: 'Common authentication functions'
    -
        name: User
        description: 'User specific information'
    -
        name: Plants
        description: 'Information about plants'
    -
        name: Weather
        description: 'Information about weather'
    -
        name: Notifications
        description: 'Functions to manage Push-Notifications'
