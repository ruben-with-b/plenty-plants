basePath: /api/v1
consumes:
    - application/json
definitions:
    User:
        description: 'Represents a user.'
        properties:
            email:
                type: string
            hashedPw:
                type: string
        required:
            - email
            - hashedPw
        type: object
    Condition:
        description: 'Describes the overall weather condition.'
        enum:
            - CLEAR
            - CLOUDY
            - RAINY
        type: string
    Weather:
        description: 'Represents the predicted weather status.'
        properties:
            condition:
                $ref: '#/definitions/Condition'
                description: 'The overall condition.'
            temperature:
                type: number
                format: double
                description: 'The temperature in celsius.'
            precipitation:
                type: number
                format: double
                description: 'The precipitation in millimeters per square meter.'
        required:
            - condition
            - temperature
            - precipitation
        type: object
    TimePeriod:
        description: "Represents a period of time (on a monthly basis).\r\n1 == january\r\n2 == february\r\n3 == march\r\n...\r\n12 == december"
        properties:
            firstMonth:
                type: number
                format: double
                description: 'The first month of the period.'
            lastMonth:
                type: number
                format: double
                description: 'The last month of the period.'
        required:
            - firstMonth
            - lastMonth
        type: object
info:
    title: web-technologien
    version: 1.0.0
    license:
        name: ISC
paths:
    /user:
        get:
            operationId: GetUser
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/User'
            security:
                -
                    basicAuth: []
            parameters: []
    /auth/login:
        post:
            operationId: Login
            produces:
                - application/json
            responses:
                '204':
                    description: 'Logged in'
                    schema:
                        type: object
                '401':
                    description: 'Authentication error'
            description: 'Log in a user.'
            security:
                -
                    basicAuth: []
            parameters: []
    /auth/logout:
        get:
            operationId: Logout
            produces:
                - application/json
            responses:
                '204':
                    description: 'Logged out'
            description: 'Log out a user.'
            security: []
            parameters: []
    /auth/signup:
        get:
            operationId: SignUp
            produces:
                - application/json
            responses:
                '204':
                    description: 'Signed up'
                    schema:
                        type: object
                '409':
                    description: 'User already exists'
            description: 'Sign up a new user.'
            security: []
            parameters:
                -
                    description: 'The email address of the new user.'
                    in: query
                    name: email
                    required: true
                    type: string
                -
                    description: 'The password of the new user.'
                    in: query
                    name: password
                    required: true
                    type: string
    /weather:
        get:
            operationId: GetWeather
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/Weather'
            summary: 'Get the weather-forecast (next day) for the specified location.'
            security: []
            parameters:
                -
                    description: 'The coordinates (latitude) of the location for which the weather should be determined.'
                    in: query
                    name: latitude
                    required: true
                    type: string
                -
                    description: 'The coordinates (longitude) of the location for which the weather should be determined.'
                    in: query
                    name: longitude
                    required: true
                    type: string
    '/plant/{plant}/sowPeriod':
        get:
            operationId: GetSowPeriod
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TimePeriod'
            summary: 'Get the sow period for a plant.'
            security: []
            parameters:
                -
                    description: 'The plant for which the sow period should be determined.'
                    in: path
                    name: plant
                    required: true
                    type: string
    '/plant/{plant}/plantPeriod':
        get:
            operationId: GetPlantPeriod
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TimePeriod'
            summary: 'Get the plant period for a plant.'
            security: []
            parameters:
                -
                    description: 'The plant for which the plant period should be determined.'
                    in: path
                    name: plant
                    required: true
                    type: string
    '/plant/{plant}/harvestPeriod':
        get:
            operationId: GetHarvestPeriod
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TimePeriod'
            summary: 'Get the harvest period for a plant.'
            security: []
            parameters:
                -
                    description: 'The plant for which the harvest period should be determined.'
                    in: path
                    name: plant
                    required: true
                    type: string
produces:
    - application/json
swagger: '2.0'
securityDefinitions:
    basicAuth:
        type: basic
host: 'localhost:3000'
